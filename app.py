import gspread
import telebot
from oauth2client.service_account import ServiceAccountCredentials
import time
import sqlite3
from telebot import types


CREDENTIALS_FILE = 'mypython-451516-60099cd00f2d.json'


SPREADSHEET_ID = "1aqf8Emr6R0q2eiJrPp0x3gNfH3M3o25M5OHV_yiOcxM"


scope = [
    "https://spreadsheets.google.com/feeds",
    'https://www.googleapis.com/auth/drive'
]


creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
client = gspread.authorize(creds)

try:
    sheet = client.open_by_key(SPREADSHEET_ID).worksheet("–ó–∞–ø–∏—Å—å –Ω–∞ –°–ì")
except gspread.SpreadsheetNotFound:
    print(f"–û—à–∏–±–∫–∞: –¢–∞–±–ª–∏—Ü–∞ —Å ID '{SPREADSHEET_ID}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    exit()
except gspread.WorksheetNotFound:
    print("–û—à–∏–±–∫–∞: –õ–∏—Å—Ç '–ó–∞–ø–∏—Å—å –Ω–∞ –°–ì' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–∞–±–ª–∏—Ü–µ.")
    exit()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")
    exit()


bot = telebot.TeleBot('7748261656:AAGWXBoQdDjoiEh_Hy0nzGB5buqDh8HsgP8')


user_states = {}



def create_table():
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER,
            user_name TEXT,
            user_role TEXT
        )
    ''')
    conn.commit()
    conn.close()

create_table()

def get_slot_status(slot):
    return f"‚ùå *{slot[0]}*" if slot and slot[0] else '‚úÖ _–°–ª–æ—Ç —Å–≤–æ–±–æ–¥–µ–Ω_'

def format_slots(slots, roles, slot_numbers, slot_nomer):
    return [f"{slot_nomer}: üë§ *{slot_number}* : {role[0]} -  {get_slot_status(slot)}" for slot, role, slot_number, slot_nomer in zip(slots, roles, slot_numbers,slot_nomer)]


def get_friday_1_slots_info():
    

    data = sheet.get_values('I4:N31')  
    date_value = data[0][0:2]  # I4:J4
    side_value = data[1][0:2]  # I5:J5
    tip_value = data[1][3:5]   # T5:V5
    name_value = data[0][3:5]  # T4:V4
    maps_value = data[2][3:5]  # T6:V6

    
    
    
    date_output = ''.join([str(date) for date in date_value[0]])

    
    side_output = ''.join([str(side) for side in side_value[0]])

    
    tip_output = ''.join([str(tip) for tip in tip_value[0]])

    
    name_output = ''.join([str(name) for name in name_value[0]])

    
    maps_output = ''.join([str(maps) for maps in maps_value[0]])

    
    if "–°–∏–Ω–∏–µ" in side_output:
        side_emoji = "üîµ"
    elif "–ö—Ä–∞—Å–Ω—ã–µ" in side_output:
        side_emoji = "üî¥"
    elif "–ó–µ–ª—ë–Ω—ã–µ" in side_output:
        side_emoji = "üü¢"
    else:
        side_emoji = ""

    slots = [row[0:2] for row in data[3:11]]  
    roles = [row[2:5] for row in data[3:11]]  
    
    slot_numbers = [data[i][5] for i in range(3, len(data))]   

    slot_nomer = sheet.col_values(8)[6:]
    
    if len(slots) < 8:
        slots += [[] for _ in range(8 - len(slots))]
        roles += [[] for _ in range(8 - len(roles))]
        slot_numbers += [str(i + 1) for i in range(len(slot_numbers), 8)]

    formatted_slots = format_slots(slots[:8], roles[:8], slot_numbers[:8],slot_nomer[:8])

    
    reserve_slots = [row[0:2] for row in data[11:28]]  # Q15:R31 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã)
    reserve_roles = [row[2:5] for row in data[11:28]]  # S15:U31 (—Ä–æ–ª–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤)
    reserve_slot_numbers = sheet.col_values(8)[14:]  # –ù–æ–º–µ—Ä–∞ –∑–∞–ø–∞—Å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤

    reserve_text = ""
    
    for i, (slot, role, slot_number) in enumerate(zip(reserve_slots, reserve_roles, reserve_slot_numbers)):
        if slot and slot[0]:  
            if role and role[0]:  
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : {role[0]} - ‚ùå *{slot[0]}*\n"
            else:
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : - ‚ùå *{slot[0]}*\n"
        
        
        if not slot and not role:
            break

    if reserve_text:
        reserve_text = "\n\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n" + reserve_text

    text = f"*–ü—è—Ç–Ω–∏—Ü–∞ (–ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞)*\n*–î–∞—Ç–∞:* **{date_output}**\n*–°—Ç–æ—Ä–æ–Ω–∞:* **{side_output} {side_emoji}**\n*–¢–∏–ø:* **{tip_output}**\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* **{name_output}**\n*–ö–∞—Ä—Ç–∞:* **{maps_output}**\n" + "\n".join(formatted_slots) + reserve_text

    return text, slots


def get_friday_2_slots_info():
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã


    data = sheet.get_values('Q4:V31') 
    date_value = data[0][0:2]  # I4:J4
    side_value = data[1][0:2]  # I5:J5
    tip_value = data[1][3:5]   # T5:V5
    name_value = data[0][3:5]  # T4:V4
    maps_value = data[2][3:5]  # T6:V6

    
    date_output = ''.join([str(date) for date in date_value[0]])

    
    side_output = ''.join([str(side) for side in side_value[0]])

    
    tip_output = ''.join([str(tip) for tip in tip_value[0]])

    
    name_output = ''.join([str(name) for name in name_value[0]])

    
    maps_output = ''.join([str(maps) for maps in maps_value[0]])

    
    if "–°–∏–Ω–∏–µ" in side_output:
        side_emoji = "üîµ"
    elif "–ö—Ä–∞—Å–Ω—ã–µ" in side_output:
        side_emoji = "üî¥"
    elif "–ó–µ–ª—ë–Ω—ã–µ" in side_output:
        side_emoji = "üü¢"
    else:
        side_emoji = ""
    slots = [row[0:2] for row in data[3:11]]  # Q7:R14 
    roles = [row[2:5] for row in data[3:11]]  # S7:U14 
    
    slot_numbers = [data[i][5] for i in range(3, len(data))]   
    slot_nomer = sheet.col_values(8)[6:]
    
    if len(slots) < 8:
        slots += [[] for _ in range(8 - len(slots))]
        roles += [[] for _ in range(8 - len(roles))]
        slot_numbers += [str(i + 1) for i in range(len(slot_numbers), 8)]

    formatted_slots = format_slots(slots[:8], roles[:8], slot_numbers[:8], slot_nomer[:8])

    
    reserve_slots = [row[0:2] for row in data[11:28]]  # Q15:R31 (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã)
    reserve_roles = [row[2:5] for row in data[11:28]]  # S15:U31 (—Ä–æ–ª–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤)
    reserve_slot_numbers = sheet.col_values(8)[14:]  

    reserve_text = ""
    
    for i, (slot, role, slot_number) in enumerate(zip(reserve_slots, reserve_roles, reserve_slot_numbers)):
        if slot and slot[0]:  
            if role and role[0]:  
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : {role[0]} - ‚ùå *{slot[0]}*\n"
            else:
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : - ‚ùå *{slot[0]}*\n"
        
        
        if not slot and not role:
            break

    if reserve_text:
        reserve_text = "\n\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n" + reserve_text

    text = f"*–ü—è—Ç–Ω–∏—Ü–∞ (–≤—Ç–æ—Ä–∞—è –∏–≥—Ä–∞)*\n*–î–∞—Ç–∞:* **{date_output}**\n*–°—Ç–æ—Ä–æ–Ω–∞:* **{side_output} {side_emoji}**\n*–¢–∏–ø:* **{tip_output}**\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* **{name_output}**\n*–ö–∞—Ä—Ç–∞:* **{maps_output}**\n" + "\n".join(formatted_slots) + reserve_text

    return text, slots




def get_saturday_1_slots_info():
    

    
    data = sheet.get_values('I41:N68') 
    date_value = data[0][0:2]  # I4:J4
    side_value = data[1][0:2]  # I5:J5
    tip_value = data[1][3:5]   # T5:V5
    name_value = data[0][3:5]  # T4:V4
    maps_value = data[2][3:5]  # T6:V6






    
    date_output = ''.join([str(date) for date in date_value[0]])

    
    side_output = ''.join([str(side) for side in side_value[0]])

    
    tip_output = ''.join([str(tip) for tip in tip_value[0]])

    
    name_output = ''.join([str(name) for name in name_value[0]])

    
    maps_output = ''.join([str(maps) for maps in maps_value[0]])

    
    if "–°–∏–Ω–∏–µ" in side_output:
        side_emoji = "üîµ"
    elif "–ö—Ä–∞—Å–Ω—ã–µ" in side_output:
        side_emoji = "üî¥"
    elif "–ó–µ–ª—ë–Ω—ã–µ" in side_output:
        side_emoji = "üü¢"
    else:
        side_emoji = ""

    slots = [row[0:2] for row in data[3:11]]  
    roles = [row[2:5] for row in data[3:11]]  
    
    slot_numbers = [data[i][5] for i in range(3, len(data))]   
    slot_nomer = sheet.col_values(8)[6:]

    
    if len(slots) < 8:
        slots += [[] for _ in range(8 - len(slots))]
        roles += [[] for _ in range(8 - len(roles))]
        slot_numbers += [str(i + 1) for i in range(len(slot_numbers), 8)]

    formatted_slots = format_slots(slots[:8], roles[:8], slot_numbers[:8], slot_nomer)

    
    reserve_slots = [row[0:2] for row in data[11:28]]  
    reserve_roles = [row[2:5] for row in data[11:28]] 
    reserve_slot_numbers = sheet.col_values(8)[14:]  

    reserve_text = ""
    
    for i, (slot, role, slot_number) in enumerate(zip(reserve_slots, reserve_roles, reserve_slot_numbers)):
        if slot and slot[0]: 
            if role and role[0]:  
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : {role[0]} - ‚ùå *{slot[0]}*\n"
            else:
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : - ‚ùå *{slot[0]}*\n"
        
        
        if not slot and not role:
            break

    if reserve_text:
        reserve_text = "\n\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n" + reserve_text

    text = f"*–°—É–±–±–æ—Ç–∞ (–ø–µ—Ä–≤–∞—è –∏–≥—Ä–∞)*\n*–î–∞—Ç–∞:* **{date_output}**\n*–°—Ç–æ—Ä–æ–Ω–∞:* **{side_output} {side_emoji}**\n*–¢–∏–ø:* **{tip_output}**\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* **{name_output}**\n*–ö–∞—Ä—Ç–∞:* **{maps_output}**\n" + "\n".join(formatted_slots) + reserve_text

    return text, slots


def get_saturday_2_slots_info():
   

    
    data = sheet.get_values('Q41:V68')  
    date_value = data[0][0:2]  # I4:J4
    side_value = data[1][0:2]  # I5:J5
    tip_value = data[1][3:5]   # T5:V5
    name_value = data[0][3:5]  # T4:V4
    maps_value = data[2][3:5]  # T6:V6


    
    date_output = ''.join([str(date) for date in date_value[0]])

    
    side_output = ''.join([str(side) for side in side_value[0]])

    
    tip_output = ''.join([str(tip) for tip in tip_value[0]])

    
    name_output = ''.join([str(name) for name in name_value[0]])

    
    maps_output = ''.join([str(maps) for maps in maps_value[0]])

    
    if "–°–∏–Ω–∏–µ" in side_output:
        side_emoji = "üîµ"
    elif "–ö—Ä–∞—Å–Ω—ã–µ" in side_output:
        side_emoji = "üî¥"
    elif "–ó–µ–ª—ë–Ω—ã–µ" in side_output:
        side_emoji = "üü¢"
    else:
        side_emoji = ""

    slots = [row[0:2] for row in data[3:11]]  # Q7:R14 
    roles = [row[2:5] for row in data[3:11]]  # S7:U14 
    
    slot_numbers = [data[i][5] for i in range(3, len(data))]  
    slot_nomer = sheet.col_values(8)[6:]

    
    if len(slots) < 8:
        slots += [[] for _ in range(8 - len(slots))]
        roles += [[] for _ in range(8 - len(roles))]
        slot_numbers += [str(i + 1) for i in range(len(slot_numbers), 8)]

    formatted_slots = format_slots(slots[:8], roles[:8], slot_numbers[:8], slot_nomer)

   
    reserve_slots = [row[0:2] for row in data[11:28]]  # Q15:R31 
    reserve_roles = [row[2:5] for row in data[11:28]]  # S15:U31 
    reserve_slot_numbers = sheet.col_values(8)[14:]  

    reserve_text = ""
    
    for i, (slot, role, slot_number) in enumerate(zip(reserve_slots, reserve_roles, reserve_slot_numbers)):
        if slot and slot[0]:  
            if role and role[0]:  
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : {role[0]} - ‚ùå *{slot[0]}*\n"
            else:
                reserve_text += f"üë§ *–ó–∞–ø–∞—Å–Ω–æ–π —Å–ª–æ—Ç {slot_number}* : - ‚ùå *{slot[0]}*\n"
        
        
        if not slot and not role:
            break

    if reserve_text:
        reserve_text = "\n\n*–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ª–æ—Ç—ã:*\n" + reserve_text

    text = f"*–°—É–±–±–æ—Ç–∞ (–≤—Ç–æ—Ä–∞—è –∏–≥—Ä–∞)*\n*–î–∞—Ç–∞:* **{date_output}**\n*–°—Ç–æ—Ä–æ–Ω–∞:* **{side_output} {side_emoji}**\n*–¢–∏–ø:* **{tip_output}**\n*–ù–∞–∑–≤–∞–Ω–∏–µ:* **{name_output}**\n*–ö–∞—Ä—Ç–∞:* **{maps_output}**\n" + "\n".join(formatted_slots) + reserve_text

    return text, slots


@bot.message_handler(commands=['saturday_1'])
def handle_saturday_1(message):
    start_time = time.time()
    bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –¥–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å...')

    text, slots = get_saturday_1_slots_info()

    
    markup = types.InlineKeyboardMarkup()
    buttons = []

    all_slots_filled = True

    roles = sheet.get('K44:M51')  
    slot_numbers = sheet.col_values(8)[43:51]  

    for i, (slot, role, slot_number) in enumerate(zip(slots[:8], roles[:8], slot_numbers[:8])):
        if not slot or not slot[0]:
            all_slots_filled = False
            button = types.InlineKeyboardButton(text=f"–°–ª–æ—Ç {slot_number}", callback_data=f"sat_slot_1_{i+1}")
            buttons.append(button)

            if len(buttons) == 3:
                markup.row(*buttons)
                buttons = []

    if buttons:
        markup.row(*buttons)

    if all_slots_filled and len(slots) >= 8:
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", callback_data="sat_reserve_slot_1"))

    markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üóë", callback_data="sat_remove_slot_1"))
    markup.add(types.InlineKeyboardButton(text="–§–æ—Ä–º–∞ ü™ñ", callback_data="outfit_3"))

    global message3
    message3 = bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

    

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    global keyboard3
    keyboard3 = markup

@bot.message_handler(commands=['saturday_2'])
def handle_saturday_2(message):
    start_time = time.time()
    bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –¥–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å...')

    text, slots = get_saturday_2_slots_info()

    
    markup = types.InlineKeyboardMarkup()
    buttons = []

    all_slots_filled = True

    roles = sheet.get('S44:U51') 
    slot_numbers = sheet.col_values(16)[43:51]  

    for i, (slot, role, slot_number) in enumerate(zip(slots[:8], roles[:8], slot_numbers[:8])):
        if not slot or not slot[0]:
            all_slots_filled = False
            button = types.InlineKeyboardButton(text=f"C–ª–æ—Ç {slot_number}", callback_data=f"sat_slot_2_{i+1}")
            buttons.append(button)

            if len(buttons) == 3:
                markup.row(*buttons)
                buttons = []

    if buttons:
        markup.row(*buttons)

    if all_slots_filled and len(slots) >= 8:
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", callback_data="sat_reserve_slot_2"))

    markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üóë", callback_data="sat_remove_slot_2"))

    markup.add(types.InlineKeyboardButton(text="–§–æ—Ä–º–∞ ü™ñ", callback_data="outfit_4"))

    global message4
    message4 = bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    global keyboard4
    keyboard4 = markup


@bot.callback_query_handler(func=lambda call: call.data.startswith("sat_slot_1_"))
def handle_sat_slot_1(call):
    slot_number = int(call.data.split("_")[3])

    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        user_name, user_role = user_data
        full_name = f"{user_name} ({user_role})"

        
        slots = sheet.get('I44:J51')  
        reserve_slots = sheet.get('I52:J')  

        for slot in slots + reserve_slots:
            if slot and slot[0] == full_name:
                bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                return

        
        sheet.update_cell(44 + slot_number - 1, 9, full_name)  

        text, slots = get_saturday_1_slots_info()
        bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
        bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
        bot.edit_message_text(chat_id=message3.chat.id, message_id=message3.id, text=text,
                              parse_mode='Markdown', reply_markup=keyboard3)

    else:
        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


@bot.callback_query_handler(func=lambda call: call.data.startswith("sat_slot_2_"))
def handle_sat_slot_2(call):
    slot_number = int(call.data.split("_")[3])

    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        user_name, user_role = user_data
        full_name = f"{user_name} ({user_role})"

       
        slots = sheet.get('Q44:R51')  
        reserve_slots = sheet.get('Q52:R')  

        for slot in slots + reserve_slots:
            if slot and slot[0] == full_name:
                bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                return

        
        sheet.update_cell(44 + slot_number - 1, 17, full_name) 

        text, slots = get_saturday_2_slots_info()
        bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
        bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
        bot.edit_message_text(chat_id=message4.chat.id, message_id=message4.id, text=text,
                              parse_mode='Markdown', reply_markup=keyboard4)

    else:
        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


@bot.callback_query_handler(func=lambda call: call.data == "sat_remove_slot_1")
def remove_slot_sat_1(call):
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        user_name, user_role = user_data
        full_name = f"{user_name} ({user_role})"

        
        slots = sheet.get('I44:J51')
        for i, slot in enumerate(slots):
            if slot and slot[0] == full_name:
                
                sheet.update_cell(44 + i, 9, '')  
                bot.answer_callback_query(call.id, text="–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                text, slots = get_saturday_1_slots_info()
                bot.edit_message_text(chat_id=message3.chat.id, message_id=message3.id, text=text,
                                      parse_mode='Markdown', reply_markup=keyboard3)
                return

        
        reserve_slots = sheet.get('I52:J')
        for i, slot in enumerate(reserve_slots):
            if slot and slot[0] == full_name:
                
                sheet.update_cell(52 + i, 9, '')  
                bot.answer_callback_query(call.id, text="–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                text, slots = get_saturday_1_slots_info()
                bot.edit_message_text(chat_id=message3.chat.id, message_id=message3.id, text=text,
                                      parse_mode='Markdown', reply_markup=keyboard3)
                return

        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
    else:
        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

@bot.callback_query_handler(func=lambda call: call.data == "sat_remove_slot_2")
def remove_slot_sat_2(call):
    
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()

    if user_data:
        user_name, user_role = user_data
        full_name = f"{user_name} ({user_role})"

        
        slots = sheet.get('Q44:R51')
        for i, slot in enumerate(slots):
            if slot and slot[0] == full_name:
                
                sheet.update_cell(44 + i, 17, '') 
                bot.answer_callback_query(call.id, text="–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                text, slots = get_saturday_2_slots_info()
                bot.edit_message_text(chat_id=message4.chat.id, message_id=message4.id, text=text,
                                      parse_mode='Markdown', reply_markup=keyboard4)
                return

        
        reserve_slots = sheet.get('Q52:R')
        for i, slot in enumerate(reserve_slots):
            if slot and slot[0] == full_name:
                
                sheet.update_cell(52 + i, 17, '')  
                bot.answer_callback_query(call.id, text="–í–∞—à–∞ –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞")
                text, slots = get_saturday_2_slots_info()
                bot.edit_message_text(chat_id=message4.chat.id, message_id=message4.id, text=text,
                                      parse_mode='Markdown', reply_markup=keyboard4)
                return

        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å")
    else:
        bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")



@bot.message_handler(commands=['friday_2']) 
def handle_friday_2(message):
    

    
    start_time = time.time()
    bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –¥–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å...')

    text, slots = get_friday_2_slots_info()

    
    markup = types.InlineKeyboardMarkup()
    buttons = []

    all_slots_filled = True  

    roles = sheet.get('S7:U14')
    slot_numbers = sheet.col_values(16)[6:]

    for i, (slot, role, slot_number) in enumerate(zip(slots[:8], roles[:8], slot_numbers[:8])):
        if not slot or not slot[0]:  
            all_slots_filled = False  
            button = types.InlineKeyboardButton(text=f"C–ª–æ—Ç {slot_number}", callback_data=f"slot_2_{i+1}")
            buttons.append(button)

            if len(buttons) == 3:  
                markup.row(*buttons)
                buttons = []

    if buttons:
        markup.row(*buttons)

    if all_slots_filled and len(slots) >= 8:  
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", callback_data="reserve_slot_2"))

    markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üóë", callback_data="remove_slot_2"))

    markup.add(types.InlineKeyboardButton(text="–§–æ—Ä–º–∞ ü™ñ", callback_data="outfit_2"))

    global message1
    message1 = bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup) 
    
    end_time = time.time()  
    elapsed_time = end_time - start_time  
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")  
    global keyboard
    keyboard = markup

@bot.message_handler(commands=['friday_1'])
def handle_friday_1(message):
    start_time = time.time()
    bot.send_message(message.chat.id, '–ü–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ, —è –¥–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å...')

    text, slots = get_friday_1_slots_info()

    
    markup = types.InlineKeyboardMarkup()
    buttons = []

    all_slots_filled = True

    roles = sheet.get('K7:M14')
    slot_numbers = sheet.col_values(8)[6:]

    for i, (slot, role, slot_number) in enumerate(zip(slots[:8], roles[:8], slot_numbers[:8])):
        if not slot or not slot[0]:
            all_slots_filled = False
            button = types.InlineKeyboardButton(text=f"–°–ª–æ—Ç {slot_number}", callback_data=f"slot_1_{i+1}")
            buttons.append(button)

            if len(buttons) == 3:
                markup.row(*buttons)
                buttons = []

    if buttons:
        markup.row(*buttons)

    if all_slots_filled and len(slots) >= 8:
        markup.add(types.InlineKeyboardButton(text="–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç", callback_data="reserve_slot_1"))

    markup.add(types.InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å üóë", callback_data="remove_slot_1"))

    markup.add(types.InlineKeyboardButton(text="–§–æ—Ä–º–∞ ü™ñ", callback_data="outfit_1"))

    global message2
    message2 = bot.send_message(message.chat.id, text, parse_mode='Markdown', reply_markup=markup)

    end_time = time.time()
    elapsed_time = end_time - start_time
    print(f"–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
    global keyboard2
    keyboard2 = markup

@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect('bot.db')
    cursor = conn.cursor()
    cursor.execute('SELECT * FROM users WHERE user_id = ?', (message.from_user.id,))
    user_data = cursor.fetchone()
    conn.close()
    
    if user_data:
        
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        btn1 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ 1')
        btn2 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ 2')
        btn3 = types.KeyboardButton('–°—É–±–±–æ—Ç–∞ 1')
        btn4 = types.KeyboardButton('–°—É–±–±–æ—Ç–∞ 2')
        markup.add(btn1, btn2, btn3, btn4)
        
        bot.send_message(message.chat.id, '–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è, –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É:', reply_markup=markup)
    else:
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–Ω–∞—Å—Ç–∞—Å–∏—è. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –ù–∞—Å—Ç—è. –ú–µ–Ω—è —Å–æ–∑–¥–∞–ª –ì–ª–∏–Ω–æ–ø–æ–ª–∫, —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —á–ª–µ–Ω–∞–º –æ—Ç—Ä—è–¥–∞ TAF.')
        time.sleep(4)
        bot.send_message(message.chat.id, '–î–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è –ø–æ–±–ª–∏–∂–µ. –ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?')
        
        
        user_states[message.from_user.id] = 'wait_name'

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    if message.text == '–ü—è—Ç–Ω–∏—Ü–∞ 1':
        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–µ –≤ –ø—è—Ç–Ω–∏—Ü—É...")
        handle_friday_1(message)
    elif message.text == '–ü—è—Ç–Ω–∏—Ü–∞ 2':
        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–µ –≤ –ø—è—Ç–Ω–∏—Ü—É...")
        handle_friday_2(message)
    elif message.text == '–°—É–±–±–æ—Ç–∞ 1':
        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –ø–µ—Ä–≤–æ–π –∏–≥—Ä–µ –≤ —Å—É–±–±–æ—Ç—É...")
        handle_saturday_1(message)
    elif message.text == '–°—É–±–±–æ—Ç–∞ 2':
        bot.send_message(message.chat.id, "–ó–∞–≥—Ä—É–∂–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—Ç–æ—Ä–æ–π –∏–≥—Ä–µ –≤ —Å—É–±–±–æ—Ç—É...")
        handle_saturday_2(message)
    
    if message.from_user.id in user_states and user_states[message.from_user.id] == 'wait_name':
        allowed_names = ['lolfastik','Swift','Tynec','Argonak','Kamchatka','Glinopolk','Steppe','Storm','Barmaley','Club','PEBHOCTb','Ukrainec','Ugol','Kondra','Rulka','PAHTERA','Wekman','Ultio','4apaev','Losc','Tapok','Dubas','Andreika','Crauch','Strangekyy']
        user_name = message.text
        if user_name in allowed_names:
            roles = {
                'lolfastik': '–ö–æ–º–∞–Ω–¥–∏—Ä –æ—Ç—Ä—è–¥–∞',
                'Swift': '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ö–æ–º–∞–Ω–¥–∏—Ä–∞ –æ—Ç—Ä—è–¥–∞',
                'Tynec': '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ö–æ–º–∞–Ω–¥–∏—Ä–∞ –æ—Ç—Ä—è–¥–∞',
                'Argonak': '–ó–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –ö–æ–º–∞–Ω–¥–∏—Ä–∞ –æ—Ç—Ä—è–¥–∞',
                'Kamchatka': '–®—Ç–∞–±–∏—Å—Ç',
                'Glinopolk': '–®—Ç–∞–±–∏—Å—Ç',
                'Steppe': '–®—Ç–∞–±–∏—Å—Ç',
                'Storm': '–®—Ç–∞–±–∏—Å—Ç',
                'Barmaley': '–ë–æ–µ—Ü –æ—Ç—Ä—è–¥–∞',
                'Club': '–ë–æ–µ—Ü –æ—Ç—Ä—è–¥–∞',
                'PEBHOCTb': '–ë–æ–µ—Ü –æ—Ç—Ä—è–¥–∞',
                'Ukrainec': '–ë–æ–µ—Ü –æ—Ç—Ä—è–¥–∞',
                'Ugol': '–ö—É—Ä—Å–∞–Ω—Ç –æ—Ç—Ä—è–¥–∞',
                'Kondra': '–ö—É—Ä—Å–∞–Ω—Ç –æ—Ç—Ä—è–¥–∞',
                'Rulka': '–ö—É—Ä—Å–∞–Ω—Ç –æ—Ç—Ä—è–¥–∞',
                'Strangekyy': '–ö—É—Ä—Å–∞–Ω—Ç –æ—Ç—Ä—è–¥–∞',
                'Crauch': '–ö—É—Ä—Å–∞–Ω—Ç –æ—Ç—Ä—è–¥–∞',
                'Ultio': '–ë–æ–µ—Ü –∑–∞–ø–∞—Å–∞',
                '4apaev': '–ë–æ–µ—Ü –∑–∞–ø–∞—Å–∞',
                'Losc': '–ë–æ–µ—Ü –∑–∞–ø–∞—Å–∞',
                'Tapok': '–ë–æ–µ—Ü –∑–∞–ø–∞—Å–∞',
                'Dubas': '–ë–æ–µ—Ü –∑–∞–ø–∞—Å–∞',
                'Andreika': '–ë–æ–µ—Ü –∑–∞–ø–∞—Å–∞',
                
            }
            
            conn = sqlite3.connect('bot.db')
            cursor = conn.cursor()
            cursor.execute('INSERT INTO users (user_id, user_name, user_role) VALUES (?, ?, ?)',
                           (message.from_user.id, user_name, roles[user_name]))
            conn.commit()
            conn.close()
            
            bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –¢–µ–ø–µ—Ä—å —Ç—ã —Å–º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –Ω–∞ 100%')



            
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            btn1 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ 1')
            btn2 = types.KeyboardButton('–ü—è—Ç–Ω–∏—Ü–∞ 2')
            btn3 = types.KeyboardButton('–°—É–±–±–æ—Ç–∞ 1')
            btn4 = types.KeyboardButton('–°—É–±–±–æ—Ç–∞ 2')
            markup.add(btn1, btn2, btn3, btn4)
        
            bot.send_message(message.chat.id, '–ú–æ–∂–µ—à—å –≤—ã–±–∏—Ä–∞—Ç—å –∏–≥—Ä—É:', reply_markup=markup)
            
            del user_states[message.from_user.id]
        else:
            bot.send_message(message.chat.id, '–•–º, —è –Ω–µ –Ω–∞—à–ª–∞ —Ç–µ–±—è –≤ —Å–≤–æ–µ–π –ë–∞–∑–µ –î–∞–Ω–Ω—ã—Ö, –º–æ–∂–µ—Ç —Ç—ã –æ—à–∏–±—Å—è?.')







@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    
    if call.data.startswith("slot_1_"):
        slot_number = int(call.data.split("_")[2])

        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"

            
            slots = sheet.get('I7:J14')  
            reserve_slots = sheet.get('I15:J22')  

            for slot in slots + reserve_slots:
                if slot and slot[0] == full_name:
                    bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                    return

            
            sheet.update_cell(7 + slot_number - 1, 9, full_name) 

            text, slots = get_friday_1_slots_info()

            bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
            bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
            bot.edit_message_text(chat_id=message2.chat.id, message_id=message2.id, text=text,
                                  parse_mode='Markdown', reply_markup=keyboard2)

        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    elif call.data == "reserve_slot_1":
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"

            
            slots = sheet.get('I7:J14')  
            reserve_slots = sheet.get('I15:J22')  

            for slot in slots + reserve_slots:
                if slot and slot[0] == full_name:
                    bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                    return

           
            reserve_slots = sheet.get('I15:J22')  
            for i, slot in enumerate(reserve_slots):
                
                if not slot or not slot[0]:  
                    
                   
                    sheet.update_cell(15 + i, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    
                    
                    break

                elif len(reserve_slots) == 1:  
                    
                    sheet.update_cell(15 + i+1, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    break
                
                elif len(reserve_slots) == 2:  
                    
                    sheet.update_cell(15 + i+2, 9, full_name) 

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    break
                elif len(reserve_slots) == 3:  
                    
                    sheet.update_cell(15 + i+3, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    break
                elif len(reserve_slots) == 4:  
                    
                    sheet.update_cell(15 + i+4, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    break
                
            else:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    elif call.data == "remove_slot_1":
      
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"

            
            slots = sheet.get('I7:J14')
            for i, slot in enumerate(slots):
                if slot and slot[0] == full_name:
                    sheet.update_cell(7 + i, 9, "")  
                    text, slots = get_friday_1_slots_info()
                    bot.answer_callback_query(call.id, text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {i + 1} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {i + 1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    bot.edit_message_text(chat_id=message2.chat.id, message_id=message2.id, text=text,
                                          parse_mode='Markdown', reply_markup=keyboard2)
                    
                    return

            
            reserve_slots = sheet.get('I15:J22')
            for i, slot in enumerate(reserve_slots):
                if slot and slot[0] == full_name:
                    sheet.update_cell(15 + i, 9, "")  

                    bot.answer_callback_query(call.id, text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç {i + 1} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç {i + 1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    return

            bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")



    elif call.data == "outfit_1":
        bot.send_message(call.message.chat.id, f"–ú—ã:")
        outfit_1 = sheet.get_values('K979:K984')  
        for i in range(0,len(outfit_1)):
            bot.send_message(call.message.chat.id, outfit_1[i])
        bot.send_message(call.message.chat.id, f"–í—Ä–∞–≥:")
        outfit_1_enemy = sheet.get_values('K985:K990')  
        for i in range(0,len(outfit_1_enemy)):
            bot.send_message(call.message.chat.id, outfit_1_enemy[i])

    elif call.data == "outfit_2":
        bot.send_message(call.message.chat.id, f"–ú—ã:")
        outfit_1 = sheet.get_values('L979:L984')  
        for i in range(0,len(outfit_1)):
            bot.send_message(call.message.chat.id, outfit_1[i])
        bot.send_message(call.message.chat.id, f"–í—Ä–∞–≥:")
        outfit_1_enemy = sheet.get_values('L985:L990')  
        for i in range(0,len(outfit_1_enemy)):
            bot.send_message(call.message.chat.id, outfit_1_enemy[i])

    
    elif call.data == "outfit_3":
        bot.send_message(call.message.chat.id, f"–ú—ã:")
        outfit_1 = sheet.get_values('M979:M984')  
        for i in range(0,len(outfit_1)):
            bot.send_message(call.message.chat.id, outfit_1[i])
        bot.send_message(call.message.chat.id, f"–í—Ä–∞–≥:")
        outfit_1_enemy = sheet.get_values('M985:M990')  
        for i in range(0,len(outfit_1_enemy)):
            bot.send_message(call.message.chat.id, outfit_1_enemy[i])

    elif call.data == "outfit_4":
        bot.send_message(call.message.chat.id, f"–ú—ã:")
        outfit_1 = sheet.get_values('N979:N984')  
        for i in range(0,len(outfit_1)):
            bot.send_message(call.message.chat.id, outfit_1[i])
        bot.send_message(call.message.chat.id, f"–í—Ä–∞–≥:")
        outfit_1_enemy = sheet.get_values('N985:N990')  
        for i in range(0,len(outfit_1_enemy)):
            bot.send_message(call.message.chat.id, outfit_1_enemy[i])

    

     
    if call.data.startswith("slot_2_"):
        slot_number = int(call.data.split("_")[2])
        
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()
        
        if user_data:
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"
            
            
            slots = sheet.get('Q7:R14')  
            reserve_slots = sheet.get('Q15:R22')  
            
            for slot in slots + reserve_slots:
                if slot and slot[0] == full_name:
                    bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                    return
            
           
            sheet.update_cell(7 + slot_number - 1, 17, full_name)  


            text, slots = get_friday_2_slots_info()

                                                                                 


            
            bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
            bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {slot_number}")
            bot.edit_message_text(chat_id = message1.chat.id, message_id = message1.id, text = text, parse_mode='Markdown',reply_markup=keyboard)





            
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
            
    
    elif call.data == "reserve_slot_2":
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"

            
            slots = sheet.get('Q7:R14')  
            reserve_slots = sheet.get('Q15:R22')  

            for slot in slots + reserve_slots:
                if slot and slot[0] == full_name:
                    bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                    return

            
            reserve_slots = sheet.get('Q15:R22')  
            
            for i, slot in enumerate(reserve_slots):
                
                if not slot or not slot[0]:  
                    
                    
                    sheet.update_cell(15 + i, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    
                    
                    break

                elif len(reserve_slots) == 1:  
                    
                    sheet.update_cell(15 + i+1, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    break
                
                elif len(reserve_slots) == 2:  
                    
                    sheet.update_cell(15 + i+2, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    break
                elif len(reserve_slots) == 3:  
                    
                    sheet.update_cell(15 + i+3, 17, full_name) 

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    break
                elif len(reserve_slots) == 4:  
                    
                    sheet.update_cell(15 + i+4, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    break
                
            else:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
    
        
            
    elif call.data == "remove_slot_2":
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()
        
        if user_data:
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"
            
            
            slots = sheet.get('Q7:R14')
            for i, slot in enumerate(slots):
                if slot and slot[0] == full_name:
                    sheet.update_cell(7 + i, 17, "")  
                    text, slots = get_friday_2_slots_info()
                    bot.answer_callback_query(call.id, text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {i+1} —É–¥–∞–ª–µ–Ω–∞")    
                    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ —Å–ª–æ—Ç {i+1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    bot.edit_message_text(chat_id = message1.chat.id, message_id = message1.id, text = text, parse_mode='Markdown',reply_markup=keyboard)
                    
                    return
            
            
            reserve_slots = sheet.get('Q15:R22')
            for i, slot in enumerate(reserve_slots):
                if slot and slot[0] == full_name:
                    sheet.update_cell(15 + i, 17, "")  
                    
                    bot.answer_callback_query(call.id, text=f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç {i+1} —É–¥–∞–ª–µ–Ω–∞")
                    bot.send_message(call.message.chat.id, f"–í–∞—à–∞ –∑–∞–ø–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç {i+1} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    return
            
            bot.answer_callback_query(call.id, text="–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")


    
    elif call.data == "sat_reserve_slot_1":
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"

            
            slots = sheet.get('I44:J51')  
            reserve_slots = sheet.get('I52:J58')  

            for slot in slots + reserve_slots:
                if slot and slot[0] == full_name:
                    bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                    return

            
            reserve_slots = sheet.get('I52:J58')  
            
            for i, slot in enumerate(reserve_slots):
                
                if not slot or not slot[0]: 
                    
                   
                    sheet.update_cell(52 + i, 9, full_name) 

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    
                    
                    break

                elif len(reserve_slots) == 1:  
                    
                    sheet.update_cell(52 + i+1, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    break
                
                elif len(reserve_slots) == 2:  
                    
                    sheet.update_cell(52 + i+2, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    break
                elif len(reserve_slots) == 3:  
                    
                    sheet.update_cell(52 + i+3, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    break
                elif len(reserve_slots) == 4:  
                    
                    sheet.update_cell(52 + i+4, 9, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    break
                
            else:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")

    elif call.data == "sat_reserve_slot_2":
        
        conn = sqlite3.connect('bot.db')
        cursor = conn.cursor()
        cursor.execute('SELECT user_name, user_role FROM users WHERE user_id = ?', (call.from_user.id,))
        user_data = cursor.fetchone()
        conn.close()

        if user_data:
            
            user_name, user_role = user_data
            full_name = f"{user_name} ({user_role})"

            
            slots = sheet.get('Q44:R51')  
            reserve_slots = sheet.get('Q52:R58')  

            for slot in slots + reserve_slots:
                if slot and slot[0] == full_name:
                    bot.answer_callback_query(call.id, text="–í—ã —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω—ã –Ω–∞ –¥—Ä—É–≥–æ–π —Å–ª–æ—Ç")
                    return

            
            reserve_slots = sheet.get('Q52:R58')  
            
            for i, slot in enumerate(reserve_slots):
                
                if not slot or not slot[0]:  
                    
                    
                    sheet.update_cell(52 + i, 17, full_name) 

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 9")
                    
                    
                    break

                elif len(reserve_slots) == 1:  
                    
                    sheet.update_cell(52 + i+1, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 10")
                    break
                
                elif len(reserve_slots) == 2:  
                    
                    sheet.update_cell(52 + i+2, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 11")
                    break
                elif len(reserve_slots) == 3:  
                    
                    sheet.update_cell(52 + i+3, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 12")
                    break
                elif len(reserve_slots) == 4:  
                    
                    sheet.update_cell(52 + i+4, 17, full_name)  

                    bot.answer_callback_query(call.id, text=f"–í—ã –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    bot.send_message(call.message.chat.id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Å–ª–æ—Ç 13")
                    break
                
            else:
                bot.answer_callback_query(call.id, text="–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤")
        else:
            bot.answer_callback_query(call.id, text="–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")



        

bot.infinity_polling()
